---
layout: post
title: "フロントエンドのビルド基盤のリプレースについて"
date: 2024-11-28 00:00:00 +0900
categories: frontend
author: para7
---

## ランタイムを消したい！

執筆現在、 Stlatica のフロントエンドは Remix を使っているのですが、果たしてこれでよいものなのかという疑問が常にありました。

SNS というサービスの性質上、ほとんどの処理はクライアントサイドで実行されます。

もちろん SSR することで高速化出来る部分はいくつかあるのですが、**本当に必要な価値のある部分はブラウザとバックエンドの直接的なやりとりになるので SSR は関係ありません。**

SSR をするということは、すなわちサーバーランタイムが必要ということであり、それは運用コストの増加などにも繋がります。

**Stlatica は趣味開発、かつ収益化は特に考えていないプロジェクトですから、デプロイコストは出来るだけ削るに限ります。**

ところで、Stlatica の開発をしながらちょくちょく参考にしている misskey の設計はどうなっているのでしょうか。確認してみましょう。

<https://misskey-hub.net/ja/docs/for-admin/install/resources/cdn/>

> Misskey Web は、完全に静的であり、動作にサーバーを必要としません。したがって Misskey Web 全体を CDN でキャッシュすることができます。 Misskey API はキャッシュすることはできません。

完全に CSR or SSG にしているようです。賢いと思います。Stlatica もこれにできないでしょうか。

（そして発行された issue: <https://github.com/stlatica/stlatica/issues/702>）

## フレームワーク選定の旅へ

### 【ちらつく Remix SPA】

Remix には SSR をオフにして SPA にできる機能があります。まずこれを試してみました。

動作は問題なさそうですが、読み込み速度はかなり遅くなりました。これは仕方ありません。

……ところが、検証しているうちにもっと別の致命的な問題に気づきました。

**画面遷移のたびに、画面が一瞬真っ白になるのです。**

初めて開いた画面なら分かるのですが、一度遷移したあとの画面でも発生するのです。恐らくゼロから再レンダリングが走っているのでしょう。

シンプルな SPA 構成でこの現象は見たことが無いので、恐らく SSR 前提で設計された Remix 特有の問題ではないかと思います。

いくら開きっぱなしが中心となる SNS とはいえ、これはあまりにも気になる挙動です。

ということで、脱 Remix を前提にフレームワークの検討を始めました。

### 【機能不足の NextJS】

世間では React といえば NextJS。筆者は正直 Next があまり好きではないので極力避けているのですが、Remix が使えないとなっては致し方ありません。

NextJS では static export すれば静的ビルドを書き出すことができ、デプロイにランタイムが不要となります。ドキュメントを見てみましょう。

<https://nextjs.org/docs/app/building-your-application/deploying/static-exports>

> Unsupported Features
> Features that require a Node.js server, or dynamic logic that cannot be computed during the build process, are not supported:
>
> Dynamic Routes with dynamicParams: true

…ん？

Dynamic Routes with dynamicParams が使えない…？

つまりは

> /user/[userid]/profile

みたいな URL が使えないってこと……！？

これは致命的です。パスパラメータではなくクエリパラメータにすれば実装自体は出来ますが、URL の見た目がかなり微妙な感じになります。

> /user?id="hoge"&page="profile"

> /user/profile?id="hoge"

うーん、保守性も微妙になりそうな予感。

### 【脱 React?】

現在 React で強力なフレームワークと言える Next と Remix が脱落したので、脱 React すら見えてきました。

まだコード資産があまり多くないので、ダメージはさほど大きくはありません。もし React をやめるとしたら今がチャンスです。

候補は Vue と Svelte になるでしょうか。どちらも良い感じですが、この択であれば筆者の好み的に Svelte を選びます。~~というか Vue だと misskey と被る~~

#### 【レンダリング】

Sveltekit で prerender をオンにすれば、ログイン前のページは SSG で高速化、それ以外は CSR という柔軟な設定も可能です。

これなら、初めて訪れる人には高速な画面を表示し、ログインしたユーザーには初期ロードのあとサクサク動く画面を提供できます。

#### 【懸念点】

懸念点があるとすれば、UI フレームワーク周りです。基礎的な機能の多くは Svelte(kit) に備わっていますが、UI デザイン周りはゼロからスクラッチだと時間がかかってしまうため、初速を上げるためには可能ならライブラリに頼りたいですよね。

また、フォームライブラリについても、Superform というかなり強力で便利なライブラリはサーバーランタイム前提で設計されているので使えません。

その他ライブラリを見てみましたが、 valibot に対応しているフォーム + バリデーションライブラリ (react-hook-form の svelte 版)がないのが気にかかりました。

#### 【本当に懸念点？】

ただ、**外部依存すればするほど、パッケージ依存地獄、メンテナンス周りの問題も常に付きまとう**ようになります。

であれば、ライブラリを使わないというのも決して悪手ではないはずです。

例えば UI は Svelte 用のものを使わず、 bootstrap や bulma など CSS フレームワークを利用する手があります。Svelte とは独立していますし、メンテ継続問題も有象無象の Svelte ライブラリよりは遥かに信頼出来るでしょう。

フォームについても、バリデーション制御 + onSubmit ぐらいであれば自前で書いてもなんとかなりそうです。むしろ書いてみたいかもしれない。

### 【React なら、Tanstack Router】

もちろん、少ないとはいえ今の資産を活かすために React をフレームワークなしで使うのもアリです。

今ゼロから組み直すなら、 Tanstack Router がよさそうでしょうか。

ビルドは Vite か Rsbuild ですね。Rsbuild は超高速ですが、ここは Voidzero の Rolldown を信じて Vite を選んでおきたいところ。

これで組むと Vite + Tanstack Router + Tanstack Query みたいな Tanstack 染めになりますが、なかなか信頼出来そうな組み合わせです。

ただし、この技術スタックを選ぶと、Sveltekit とは異なり、**完全な SPA となるのでトップページだけ早くしたりするのは難しく**なります。

アプリのコア機能は元々 SPA (CSR) なので特に問題ありませんが、どこかで重さが問題になってきたときに打てる手が限られるということです。

まあ、ランタイムを消すというコスト面とのトレードオフなので、受け入れるしかないのですが。

あと気になる違いがあるとすれば、React と Svelte のパフォーマンスの差でしょうか。React は気を付けないとすぐ激重になるので、Svelte の方が気楽に書けて生産性高いんですよねぇ……。

## とりあえず、Tanstack で？

だいぶ後ろ髪を引かれているのですが、とはいえ既に React で組んでいる画面がありますので、一旦は Tanstack Router ベースの置き換えを進めていこうかと思います。

とはいえ、**検証のために、余力があれば Svelte 版も平行で開発してみたい**と考えています。

結局のところ **CSS がどうにかできれば、最初のうちはそこまで大きな苦労なく両方サポート出来る**からです。~~所詮は JSON 色付け係ってわけ。~~

という感じで、現在 SSR を廃止してサーバーランタイムなしで動くように調整中です。

まだコード量が少なく、フットワーク軽く色々出来るので両方試していきたいですね。

~~1 年経ってるのにどうしてフットワーク軽いんですか？~~
